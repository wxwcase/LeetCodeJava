======
Shift
======

/* 00000001 << 1 = 00000010 */
1 << 1 = 2

/* 00000001 << 3 = 00001000 */
1 << 3 = 8

/* 11111111 11111111 11111111 11110000 >> 4 = 11111111 11111111 11111111 11111111 */
0xFFFFFFF0 >> 4 == 0xFFFFFFFF

/* 00001111 11111111 11111111 11111111 >> 4 = 00000000 11111111 11111111 11111111 */
0x0FFFFFFF >> 4 == 0x00FFFFFF

/* 10000000 00000000 00000000 00000000 >>> 1 = 01000000 00000000 00000000 00000000 */
0x80000000 >>> 1 == 0x40000000

/* 10000000 00000000 00000000 00000000 >> 1 = 11000000 00000000 00000000 00000000 */
0x80000000 >> 1 == 0xC0000000


======
Mask
======
int bitmask = 1 << 3; // for bitmask 00001000


==========================
Binary "BitWise" Operator
==========================
1. ~: unary complement
2. &: bitwise and
3. ^: bitwise exclusive or
4. |: bitwise inclusive or
Example	
	- 1010 & 0101 == 0000
	- 1100 & 0110 == 0100
	- 1010 | 0101 == 1111
	- 1100 | 0110 == 1110
	- ~1111 == 0000
	- ~0011 == 1100	
	- 1010 ^ 0101 == 1111
	- 1100 ^ 0110 == 1010
5. Turn on/off a bit
	- 'or'ing with another number with that bit set to 1
		* 10000001 | 00100000 = 10100001 // turned on bit 5
		* 10000001 | 1 << 5 = 10100001   // turned on bit 5
		* 00000000 | 1 << 2 | 1 << 5 = 00100100
	- 'and'ing with another number of all 1's, except for the bit to be set
		* 01010101 & ~(1<<2) == 01010101 & 11111011 == 01010001


=====================================
Integer.parseInt(String s, int radix)
=====================================
1. for
	---------------------------------------------------------------------------------- 
	for (int b = Integer.parseInt("1010", 2); b <= Integer.parseInt("1111", 2); b++ {
		// do stuff.
	}
	---------------------------------------------------------------------------------- 


=========================
Reading and Writing bits
=========================
1. 

		
==========
Resources
==========
1. http://sys.cs.rice.edu/course/comp314/10/p2/javabits.html
2. http://graphics.stanford.edu/~seander/bithacks.html	
		